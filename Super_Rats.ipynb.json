{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "712604f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "initial population weights = [240.8894443962244, 242.95975749744332, 615.5996538728106, 330.43762678102, 376.6983719581924, 586.7186498969986, 350.27162168223145, 372.0726824293232, 627.1490781460565, 411.63950727250204, 445.84854084023345, 462.6632589828071, 376.4229113510751, 206.90375943269356, 389.5883218042194, 166.9839159918052, 13.734928059435504, 224.93177274740566, 409.4670823778646, 275.01149809866484]\n",
      "initial population fitness = 0.007125992383619007\n",
      "number to retain = 20\n",
      "Generation 0 fitness = 0.0074\n",
      "Generation 1 fitness = 0.0094\n",
      "Generation 2 fitness = 0.0116\n",
      "Generation 3 fitness = 0.0138\n",
      "Generation 4 fitness = 0.0166\n",
      "Generation 5 fitness = 0.0192\n",
      "Generation 6 fitness = 0.0206\n",
      "Generation 7 fitness = 0.0219\n",
      "Generation 8 fitness = 0.0235\n",
      "Generation 9 fitness = 0.0253\n",
      "Generation 10 fitness = 0.0276\n",
      "Generation 11 fitness = 0.0300\n",
      "Generation 12 fitness = 0.0319\n",
      "Generation 13 fitness = 0.0338\n",
      "Generation 14 fitness = 0.0361\n",
      "Generation 15 fitness = 0.0384\n",
      "Generation 16 fitness = 0.0404\n",
      "Generation 17 fitness = 0.0420\n",
      "Generation 18 fitness = 0.0439\n",
      "Generation 19 fitness = 0.0459\n",
      "Generation 20 fitness = 0.0479\n",
      "Generation 21 fitness = 0.0498\n",
      "Generation 22 fitness = 0.0517\n",
      "Generation 23 fitness = 0.0537\n",
      "Generation 24 fitness = 0.0558\n",
      "Generation 25 fitness = 0.0580\n",
      "Generation 26 fitness = 0.0592\n",
      "Generation 27 fitness = 0.0608\n",
      "Generation 28 fitness = 0.0621\n",
      "Generation 29 fitness = 0.0641\n",
      "Generation 30 fitness = 0.0661\n",
      "Generation 31 fitness = 0.0678\n",
      "Generation 32 fitness = 0.0701\n",
      "Generation 33 fitness = 0.0719\n",
      "Generation 34 fitness = 0.0743\n",
      "Generation 35 fitness = 0.0764\n",
      "Generation 36 fitness = 0.0780\n",
      "Generation 37 fitness = 0.0804\n",
      "Generation 38 fitness = 0.0819\n",
      "Generation 39 fitness = 0.0837\n",
      "Generation 40 fitness = 0.0853\n",
      "Generation 41 fitness = 0.0866\n",
      "Generation 42 fitness = 0.0885\n",
      "Generation 43 fitness = 0.0908\n",
      "Generation 44 fitness = 0.0934\n",
      "Generation 45 fitness = 0.0971\n",
      "Generation 46 fitness = 0.1005\n",
      "Generation 47 fitness = 0.1028\n",
      "Generation 48 fitness = 0.1052\n",
      "Generation 49 fitness = 0.1073\n",
      "Generation 50 fitness = 0.1092\n",
      "Generation 51 fitness = 0.1116\n",
      "Generation 52 fitness = 0.1127\n",
      "Generation 53 fitness = 0.1146\n",
      "Generation 54 fitness = 0.1161\n",
      "Generation 55 fitness = 0.1190\n",
      "Generation 56 fitness = 0.1214\n",
      "Generation 57 fitness = 0.1228\n",
      "Generation 58 fitness = 0.1253\n",
      "Generation 59 fitness = 0.1275\n",
      "Generation 60 fitness = 0.1302\n",
      "Generation 61 fitness = 0.1341\n",
      "Generation 62 fitness = 0.1368\n",
      "Generation 63 fitness = 0.1393\n",
      "Generation 64 fitness = 0.1419\n",
      "Generation 65 fitness = 0.1446\n",
      "Generation 66 fitness = 0.1482\n",
      "Generation 67 fitness = 0.1521\n",
      "Generation 68 fitness = 0.1552\n",
      "Generation 69 fitness = 0.1573\n",
      "Generation 70 fitness = 0.1593\n",
      "Generation 71 fitness = 0.1615\n",
      "Generation 72 fitness = 0.1642\n",
      "Generation 73 fitness = 0.1657\n",
      "Generation 74 fitness = 0.1694\n",
      "Generation 75 fitness = 0.1740\n",
      "Generation 76 fitness = 0.1776\n",
      "Generation 77 fitness = 0.1813\n",
      "Generation 78 fitness = 0.1838\n",
      "Generation 79 fitness = 0.1862\n",
      "Generation 80 fitness = 0.1890\n",
      "Generation 81 fitness = 0.1920\n",
      "Generation 82 fitness = 0.1953\n",
      "Generation 83 fitness = 0.2005\n",
      "Generation 84 fitness = 0.2079\n",
      "Generation 85 fitness = 0.2146\n",
      "Generation 86 fitness = 0.2190\n",
      "Generation 87 fitness = 0.2234\n",
      "Generation 88 fitness = 0.2310\n",
      "Generation 89 fitness = 0.2392\n",
      "Generation 90 fitness = 0.2440\n",
      "Generation 91 fitness = 0.2487\n",
      "Generation 92 fitness = 0.2501\n",
      "Generation 93 fitness = 0.2533\n",
      "Generation 94 fitness = 0.2557\n",
      "Generation 95 fitness = 0.2579\n",
      "Generation 96 fitness = 0.2595\n",
      "Generation 97 fitness = 0.2614\n",
      "Generation 98 fitness = 0.2634\n",
      "Generation 99 fitness = 0.2709\n",
      "Generation 100 fitness = 0.2754\n",
      "Generation 101 fitness = 0.2839\n",
      "Generation 102 fitness = 0.2888\n",
      "Generation 103 fitness = 0.2899\n",
      "Generation 104 fitness = 0.2947\n",
      "Generation 105 fitness = 0.2986\n",
      "Generation 106 fitness = 0.3099\n",
      "Generation 107 fitness = 0.3219\n",
      "Generation 108 fitness = 0.3326\n",
      "Generation 109 fitness = 0.3382\n",
      "Generation 110 fitness = 0.3416\n",
      "Generation 111 fitness = 0.3449\n",
      "Generation 112 fitness = 0.3481\n",
      "Generation 113 fitness = 0.3594\n",
      "Generation 114 fitness = 0.3729\n",
      "Generation 115 fitness = 0.3833\n",
      "Generation 116 fitness = 0.3902\n",
      "Generation 117 fitness = 0.3957\n",
      "Generation 118 fitness = 0.3996\n",
      "Generation 119 fitness = 0.4038\n",
      "Generation 120 fitness = 0.4059\n",
      "Generation 121 fitness = 0.4078\n",
      "Generation 122 fitness = 0.4089\n",
      "Generation 123 fitness = 0.4120\n",
      "Generation 124 fitness = 0.4147\n",
      "Generation 125 fitness = 0.4166\n",
      "Generation 126 fitness = 0.4183\n",
      "Generation 127 fitness = 0.4191\n",
      "Generation 128 fitness = 0.4219\n",
      "Generation 129 fitness = 0.4230\n",
      "Generation 130 fitness = 0.4250\n",
      "Generation 131 fitness = 0.4282\n",
      "Generation 132 fitness = 0.4324\n",
      "Generation 133 fitness = 0.4457\n",
      "Generation 134 fitness = 0.4578\n",
      "Generation 135 fitness = 0.4717\n",
      "Generation 136 fitness = 0.4854\n",
      "Generation 137 fitness = 0.4992\n",
      "Generation 138 fitness = 0.5149\n",
      "Generation 139 fitness = 0.5337\n",
      "Generation 140 fitness = 0.5471\n",
      "Generation 141 fitness = 0.5558\n",
      "Generation 142 fitness = 0.5629\n",
      "Generation 143 fitness = 0.5688\n",
      "Generation 144 fitness = 0.5725\n",
      "Generation 145 fitness = 0.5750\n",
      "Generation 146 fitness = 0.5774\n",
      "Generation 147 fitness = 0.5803\n",
      "Generation 148 fitness = 0.5980\n",
      "Generation 149 fitness = 0.6186\n",
      "Generation 150 fitness = 0.6367\n",
      "Generation 151 fitness = 0.6535\n",
      "Generation 152 fitness = 0.6614\n",
      "Generation 153 fitness = 0.6687\n",
      "Generation 154 fitness = 0.6741\n",
      "Generation 155 fitness = 0.6753\n",
      "Generation 156 fitness = 0.6796\n",
      "Generation 157 fitness = 0.6819\n",
      "Generation 158 fitness = 0.7031\n",
      "Generation 159 fitness = 0.7280\n",
      "Generation 160 fitness = 0.7456\n",
      "Generation 161 fitness = 0.7597\n",
      "Generation 162 fitness = 0.7686\n",
      "Generation 163 fitness = 0.7727\n",
      "Generation 164 fitness = 0.7794\n",
      "Generation 165 fitness = 0.7829\n",
      "Generation 166 fitness = 0.7836\n",
      "Generation 167 fitness = 0.7899\n",
      "Generation 168 fitness = 0.7929\n",
      "Generation 169 fitness = 0.7920\n",
      "Generation 170 fitness = 0.7898\n",
      "Generation 171 fitness = 0.7985\n",
      "Generation 172 fitness = 0.8013\n",
      "Generation 173 fitness = 0.8007\n",
      "Generation 174 fitness = 0.8040\n",
      "Generation 175 fitness = 0.8078\n",
      "Generation 176 fitness = 0.8098\n",
      "Generation 177 fitness = 0.8099\n",
      "Generation 178 fitness = 0.8131\n",
      "Generation 179 fitness = 0.8085\n",
      "Generation 180 fitness = 0.8264\n",
      "Generation 181 fitness = 0.8664\n",
      "Generation 182 fitness = 0.8999\n",
      "Generation 183 fitness = 0.9236\n",
      "Generation 184 fitness = 0.9369\n",
      "Generation 185 fitness = 0.9418\n",
      "Generation 186 fitness = 0.9505\n",
      "Generation 187 fitness = 0.9720\n",
      "Generation 188 fitness = 1.0003\n",
      "average weight per generation = [369, 469, 581, 688, 829, 958, 1028, 1096, 1174, 1267, 1378, 1500, 1595, 1689, 1805, 1921, 2017, 2101, 2196, 2294, 2393, 2491, 2587, 2684, 2790, 2900, 2961, 3038, 3104, 3207, 3306, 3389, 3505, 3595, 3714, 3820, 3901, 4018, 4093, 4187, 4267, 4330, 4425, 4539, 4671, 4852, 5025, 5140, 5260, 5364, 5461, 5582, 5632, 5728, 5804, 5948, 6072, 6141, 6264, 6375, 6508, 6707, 6839, 6963, 7092, 7229, 7411, 7606, 7760, 7866, 7962, 8072, 8207, 8284, 8468, 8701, 8878, 9066, 9188, 9309, 9447, 9599, 9763, 10024, 10395, 10728, 10951, 11169, 11551, 11962, 12200, 12435, 12504, 12665, 12783, 12895, 12975, 13071, 13168, 13544, 13770, 14193, 14442, 14492, 14732, 14928, 15497, 16097, 16629, 16910, 17077, 17244, 17402, 17969, 18646, 19163, 19510, 19785, 19982, 20189, 20293, 20390, 20444, 20601, 20736, 20829, 20916, 20956, 21095, 21149, 21248, 21409, 21621, 22285, 22888, 23586, 24271, 24960, 25745, 26686, 27354, 27787, 28142, 28441, 28622, 28751, 28868, 29014, 29898, 30932, 31835, 32674, 33070, 33433, 33707, 33767, 33981, 34094, 35156, 36399, 37278, 37984, 38429, 38633, 38968, 39144, 39179, 39493, 39642, 39601, 39490, 39923, 40062, 40034, 40201, 40390, 40488, 40495, 40654, 40425, 41317, 43321, 44996, 46179, 46844, 47090, 47526, 48600, 50014]\n",
      "\n",
      "number of generations = 189\n",
      "number of years = 18\n",
      "\n",
      "Runtime for this program was 4.271641969680786 seconds.\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Use genetic algorithm to simulate breeding race of super rats.\"\"\"\n",
    "\n",
    "import numpy\n",
    "import time\n",
    "import random \n",
    "import statistics\n",
    "\n",
    "# CONSTANTS (weights in grams) \n",
    "GOAL = 50000\n",
    "NUM_RATS = 20  # number of adult breeding rats in each generation\n",
    "INITIAL_MIN_WT = 200\n",
    "INITIAL_MAX_WT = 600\n",
    "INITIAL_MODE_WT = 300\n",
    "MUTATE_ODDS = 0.01\n",
    "MUTATE_MIN = 0.5\n",
    "MUTATE_MAX = 1.2\n",
    "LITTER_SIZE = 8\n",
    "LITTERS_PER_YEAR = 10\n",
    "GENERATION_LIMIT = 500\n",
    "\n",
    "# ensure even-number of rats for breeding pairs:\n",
    "if NUM_RATS % 2 != 0:\n",
    "    NUM_RATS += 1\n",
    "\n",
    "def populate(num_rats, min_wt, max_wt, mode_wt):\n",
    "    \"\"\"Initialize a population with a triangular distribution of weights.\"\"\"\n",
    "    return [int(random.triangular(min_wt, max_wt, mode_wt))\\\n",
    "            for i in range(num_rats)]\n",
    "\n",
    "def fitness(population, goal):\n",
    "    \"\"\"Measure population fitness based on an attribute mean vs target.\"\"\"\n",
    "    ave = statistics.mean(population)\n",
    "    return ave / goal\n",
    "\n",
    "def select(population, to_retain):\n",
    "    \"\"\"Cull a population to contain only a specified number of members.\"\"\"\n",
    "    sorted_population = sorted(population)\n",
    "    to_retain_by_sex = to_retain//2\n",
    "    members_per_sex = len(sorted_population)//2\n",
    "    females = sorted_population[:members_per_sex]\n",
    "    males = sorted_population[members_per_sex:]\n",
    "    selected_females = females[-to_retain_by_sex:]\n",
    "    selected_males = males[-to_retain_by_sex:]\n",
    "    return selected_males, selected_females\n",
    "\n",
    "def breed(males, females, litter_size):\n",
    "    \"\"\"Crossover genes among members of a population.\"\"\"\n",
    "    random.shuffle(males)\n",
    "    random.shuffle(females)\n",
    "    children = []\n",
    "    for male, female in zip(males, females):\n",
    "        for child in range(litter_size):\n",
    "            child = random.uniform(female, male)\n",
    "            children.append(child)\n",
    "    return children\n",
    "\n",
    "def mutate(children, mutate_odds, mutate_min, mutate_max):\n",
    "    \"\"\"Randomly alter rat weights using input odds & fractional changes.\"\"\"\n",
    "    for index, rat in enumerate(children):\n",
    "        if mutate_odds >= random.random():\n",
    "            children[index] = round(rat * random.uniform(mutate_min,\n",
    "                                                         mutate_max))\n",
    "    return children\n",
    "\n",
    "def main():\n",
    "    \"\"\"Initialize population, select, breed, and mutate, display results.\"\"\"\n",
    "    generations = 0\n",
    "\n",
    "    parents = populate(NUM_RATS, INITIAL_MIN_WT, INITIAL_MAX_WT,\n",
    "                       INITIAL_MODE_WT)\n",
    "    \n",
    "    scale = 100.0 #scale for standard deviation\n",
    "    \n",
    "    for i in range(len(parents)):\n",
    "        #randomness in weight, inputs are mean(of parents) and scale(100.0)\n",
    "        variation = statistics.mean(parents) - numpy.random.normal(statistics.mean(parents), scale)\n",
    "        parents[i] += variation\n",
    "    \n",
    "    print(\"initial population weights = {}\".format(parents))\n",
    "    popl_fitness = fitness(parents, GOAL)\n",
    "    print(\"initial population fitness = {}\".format(popl_fitness))\n",
    "    print(\"number to retain = {}\".format(NUM_RATS))\n",
    "\n",
    "    ave_wt = []\n",
    "\n",
    "    while popl_fitness < 1 and generations < GENERATION_LIMIT:            \n",
    "        selected_males, selected_females = select(parents, NUM_RATS)\n",
    "        children = breed(selected_males, selected_females, LITTER_SIZE)\n",
    "        children = mutate(children, MUTATE_ODDS, MUTATE_MIN, MUTATE_MAX)\n",
    "        \n",
    "        for i in range(len(children)):\n",
    "            #randomness in weight, inputs are mean(of children) and scale(100.0)\n",
    "            variation = statistics.mean(children) - numpy.random.normal(statistics.mean(children), scale)\n",
    "            children[i] += variation\n",
    "        \n",
    "        parents = selected_males + selected_females + children\n",
    "        popl_fitness = fitness(parents, GOAL)\n",
    "        print(\"Generation {} fitness = {:.4f}\".format(generations,\n",
    "                                                      popl_fitness))\n",
    "        ave_wt.append(int(statistics.mean(parents)))\n",
    "        generations += 1\n",
    "\n",
    "    print(\"average weight per generation = {}\".format(ave_wt))\n",
    "    print(\"\\nnumber of generations = {}\".format(generations))\n",
    "    print(\"number of years = {}\".format(int(generations / LITTERS_PER_YEAR)))\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    start_time = time.time()\n",
    "    main()\n",
    "    end_time = time.time()\n",
    "    duration = end_time - start_time\n",
    "    print(\"\\nRuntime for this program was {} seconds.\".format(duration))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "438f9ee4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac138c9a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4bd46156",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "098f1d9d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b581b4a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
